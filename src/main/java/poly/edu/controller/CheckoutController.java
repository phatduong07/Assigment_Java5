package poly.edu.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import jakarta.servlet.http.HttpSession;
import poly.edu.dao.OrderDAO;
import poly.edu.entity.*;
import poly.edu.service.CartService;

import java.util.ArrayList;
import java.util.List;

@Controller
public class CheckoutController {

    @Autowired
    private CartService cartService;

    @Autowired
    private OrderDAO orderDAO;

    // üõí Hi·ªÉn th·ªã trang thanh to√°n
    @GetMapping("/checkout")
    public String checkoutPage(@RequestParam(required = false) String success,
                               Model model, HttpSession session) {

        Account user = (Account) session.getAttribute("loggedInUser");
        if (user == null) {
            return "redirect:/login";
        }

        model.addAttribute("user", user);
        model.addAttribute("cartItems", cartService.getCart().values());
        model.addAttribute("total", cartService.getTotal());
        model.addAttribute("success", success != null && success.equals("true")); // b·∫≠t popup n·∫øu c√≥ ?success=true
        return "checkout";
    }

    // üí≥ X·ª≠ l√Ω thanh to√°n
    @PostMapping("/checkout")
    public String processCheckout(@RequestParam String paymentMethod,
                                  @RequestParam String address,
                                  @RequestParam String phoneNumber,
                                  HttpSession session) {

        Account user = (Account) session.getAttribute("loggedInUser");
        if (user == null) {
            return "redirect:/login";
        }

        // üß© C·∫≠p nh·∫≠t l·∫°i s·ªë ƒëi·ªán tho·∫°i n·∫øu ng∆∞·ªùi d√πng v·ª´a nh·∫≠p m·ªõi
        user.setPhoneNumber(phoneNumber);
        session.setAttribute("loggedInUser", user);

        // üßæ T·∫°o ƒë∆°n h√†ng m·ªõi
        Order order = new Order();
        order.setUsername(user.getUsername());
        order.setPaymentMethod(paymentMethod);
        order.setTotal(cartService.getTotal());
        order.setAddress(address);

        // üß© T·∫°o chi ti·∫øt ƒë∆°n h√†ng
        List<OrderDetail> details = new ArrayList<>();
        for (CartItem item : cartService.getCart().values()) {
            OrderDetail d = new OrderDetail();
            d.setOrder(order);
            d.setProductId(item.getProductId());
            d.setProductName(item.getName());
            d.setImage(item.getImage()); // n·∫øu c√≥ ·∫£nh s·∫£n ph·∫©m
            d.setPrice(item.getPrice());
            d.setQuantity(item.getQuantity());
            d.setTotal(item.getTotal());
            d.setSize(item.getSize()); // ‚úÖ th√™m d√≤ng n√†y ƒë·ªÉ l∆∞u size v√†o DB
            details.add(d);
        }

        order.setOrderDetails(details);

        // ‚úÖ L∆∞u ƒë∆°n h√†ng
        orderDAO.save(order);

        // üßπ X√≥a gi·ªè h√†ng
        cartService.clear();

        // üëâ Redirect l·∫°i /checkout?success=true ƒë·ªÉ hi·ªán popup + truy·ªÅn orderId
        return "redirect:/checkout?success=true&orderId=" + order.getId();
    }


    // üßæ Trang h√≥a ƒë∆°n (invoice)
    @GetMapping("/invoice/{orderId}")
    public String showInvoice(@PathVariable("orderId") int orderId, Model model, HttpSession session) {
        Account user = (Account) session.getAttribute("loggedInUser");
        if (user == null) {
            return "redirect:/login";
        }

        Order order = orderDAO.findById(orderId).orElse(null);
        if (order == null) {
            return "redirect:/";
        }

        model.addAttribute("order", order);
        model.addAttribute("user", user);
        return "invoice";
    }

    // üìú Trang l·ªãch s·ª≠ mua h√†ng
    @GetMapping("/lichsumuahang")
    public String orderHistory(Model model, HttpSession session) {
        Account user = (Account) session.getAttribute("loggedInUser");
        if (user == null) {
            return "redirect:/login";
        }

        model.addAttribute("orders", orderDAO.findByUsername(user.getUsername()));
        return "order-history";
    }
}
