package poly.edu.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;

import jakarta.servlet.http.HttpSession;
import poly.edu.dao.CategoryDAO;
import poly.edu.dao.ProductDAO;
import poly.edu.entity.Category;
import poly.edu.entity.Product;
import poly.edu.service.ProductService;

import java.util.List;
import java.util.Optional;

@Controller
@RequestMapping("/products")
public class ProductController {

    @Autowired
    ProductDAO productDAO;

    @Autowired
    CategoryDAO categoryDAO;

    @Autowired
    ProductService productService; // ‚úÖ Th√™m d√≤ng n√†y ƒë·ªÉ d√πng ƒë∆∞·ª£c searchByName

    // Hi·ªÉn th·ªã s·∫£n ph·∫©m theo danh m·ª•c
    @GetMapping("/category/{cid}")
    public String showProductsByCategory(Model model, @PathVariable("cid") String categoryId) {
        Optional<Category> categoryOpt = categoryDAO.findById(categoryId);
        if (categoryOpt.isPresent()) {
            Category category = categoryOpt.get();
            List<Product> productList = productDAO.findByCategoryId(categoryId);
            model.addAttribute("products", productList);
            model.addAttribute("pageTitle", category.getName());
        } else {
            return "redirect:/";
        }
        return "products";
    }

    
    @GetMapping("/search")
    public String search(@RequestParam(required = false) String keyword,
                         @RequestParam(required = false) Double min,
                         @RequestParam(required = false) Double max,
                         Model model) {

        List<Product> results;

        if (min != null || max != null) {
            double minPrice = (min != null) ? min : 0.0;
            double maxPrice = (max != null) ? max : Double.MAX_VALUE;
            results = productDAO.findByPriceRange(minPrice, maxPrice);
            model.addAttribute("pageTitle", "L·ªçc theo gi√°");
        } 
        else if (keyword != null && !keyword.isEmpty()) {
            results = productDAO.findByNameContainingIgnoreCase(keyword);
            model.addAttribute("pageTitle", "K·∫øt qu·∫£ t√¨m ki·∫øm");
        } 
        else {
            results = productDAO.findAll();
            model.addAttribute("pageTitle", "T·∫•t c·∫£ s·∫£n ph·∫©m");
        }

        model.addAttribute("products", results);
        model.addAttribute("keyword", keyword);
        return "search-results";
    }

    
    @GetMapping("/detail/{id}")
    public String productDetail(@PathVariable("id") Integer id, Model model) {
        Product product = productDAO.findById(id).orElse(null);
        if (product == null) return "redirect:/"; // N·∫øu kh√¥ng c√≥ s·∫£n ph·∫©m

        // L·∫•y s·∫£n ph·∫©m li√™n quan theo category
        List<Product> relatedProducts = productDAO.findTop4ByCategoryAndIdNot(product.getCategory(), id);

        model.addAttribute("product", product);
        model.addAttribute("relatedProducts", relatedProducts);

        return "product-detail";
    }


    
    @PostMapping("/delete/{id}")
    public String deleteProduct(@PathVariable("id") Integer id, HttpSession session, Model model) {
        String role = (String) session.getAttribute("role");

        // ‚úÖ Ki·ªÉm tra quy·ªÅn
        if (role == null || !role.equals("ADMIN")) {
            model.addAttribute("error", "üö´ B·∫°n kh√¥ng c√≥ quy·ªÅn x√≥a s·∫£n ph·∫©m!");
            return "error"; // T·∫°o file error.html ƒë·ªÉ hi·ªÉn th·ªã th√¥ng b√°o
        }

        productDAO.deleteById(id);
        return "redirect:/"; // ho·∫∑c redirect:/products n·∫øu b·∫°n mu·ªën quay v·ªÅ danh s√°ch s·∫£n ph·∫©m
    }
    
    @GetMapping("/edit/{id}")
    public String editForm(@PathVariable("id") Integer id, HttpSession session, Model model) {
        String role = (String) session.getAttribute("role");

        if (role == null || !role.equals("ADMIN")) {
            model.addAttribute("error", "üö´ B·∫°n kh√¥ng c√≥ quy·ªÅn ch·ªânh s·ª≠a s·∫£n ph·∫©m!");
            return "error";
        }

        Product product = productDAO.findById(id).orElse(null);
        if (product == null) {
            return "redirect:/";
        }

        model.addAttribute("product", product);
        return "product-edit"; // file product-edit.html
    }

    @PostMapping("/edit/{id}")
    public String updateProduct(@PathVariable("id") Integer id,
                                @RequestParam("price") Double price,
                                HttpSession session,
                                Model model) {
        String role = (String) session.getAttribute("role");

        if (role == null || !role.equals("ADMIN")) {
            model.addAttribute("error", "üö´ B·∫°n kh√¥ng c√≥ quy·ªÅn c·∫≠p nh·∫≠t s·∫£n ph·∫©m!");
            return "error";
        }

        Product product = productDAO.findById(id).orElse(null);
        if (product != null) {
            product.setPrice(price);
            productDAO.save(product);
        }

        return "redirect:/products/detail/" + id;
    }


}
